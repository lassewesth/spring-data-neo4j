<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN" "http://www.docbook.org/xml/4.4/docbookx.dtd">
<chapter id="tutorial_recommendations">
    <title>Recommendations</title>
    <subtitle>Movies! Friends! Bargains!</subtitle>
	<para>
        In the last part of this exercise we wanted to add recommendations to the app. 
		One obvious recommendation was movies that our fiends liked.
	</para>
	<para>
		There was this query language called Cypher that looked a bit like SQL but
		expressed graph matching queries. So we gave it a try, using the <code>neo4j-shell</code>,
		to incrementally expand the query, just by declaring what relationships we wanted to
		be taken into account and which properties of nodes and relationships to filter and
		sort on.
    </para>
	    <para>
	        <example>
	            <title>Cypher based movie recommendation on Repository</title>
	            <programlisting language="java"><![CDATA[interface MovieRepository extends GraphRepository<Movie> {
	@Query("
	start user=node({0}) 
	match user-[:FRIEND]-friend-[r:RATED]->movie
	return movie
	order by avg(r.stars) desc, count(*) desc
	limit 10
	")
    Iterable<Movie> recommendMovies(User me);
}]]></programlisting>
	  </example>
    </para>
	<para>
		But we didn't have enough friends, so it was time to get some suggested. That would be like-minded
		cineasts that rated movies similarly to us. Again Cypher to the rescue, this time only a bit
		more complex. Something that became obvious with both queries is that graph queries are always
		local, so they start from a node, or set of nodes or relationships, and then expand outwards from there.
    </para>
    <para>
        <example>
            <title>Cypher - Friend Recommendation on Repository</title>
            <programlisting language="java"><![CDATA[
interface UserRepository extends GraphRepository<User> {
	@Query("
	start user=node({0}) 
	match user-[r:RATED]->movie<-[r2:RATED]-likeminded,
	  user-[:FRIEND]-friend
	where r.stars > 3 and r2.stars >= 3
	return likeminded
	order by count(*) desc
	limit 10
	")
    Iterable<User> suggestFriends(User me);
}
]]></programlisting>
	    </example>
	</para>
    <!-- move to reference para>
        In the last part of this exercise we wanted to add recommendations to the app. One
        obvious recommendation was movies that our friends liked (and their friends too, but
        with less importance). The second recommendation was for new friends that also liked
        the movies that we liked most.
    </para>
    <para>
        Doing these kinds of ranking algorithms is a lot of fun with graph databases. The algorithms
        are implemented by traversing the graph in a certain order, collecting information on the go,
        and deciding which paths to follow and what to include in the results.
    </para>
    <para>
        We were only interested in recommendations of a certain degree of friends.
    </para>
    <para>
        <example>
            <title>Recommendations</title>
            <programlisting language="java"><![CDATA[public Map<Movie,Integer> recommendMovies(User user, final int ratingDistance) {
    final DynamicRelationshipType RATED = withName(User.RATED);
    final Map<Long,int[]> ratings=new HashMap<Long, int[]>();
    TraversalDescription traversal= Traversal.description().breadthFirst()
        .relationships(withName(User.FRIEND)).relationships(RATED, OUTGOING)
        .evaluator(new Evaluator() {

      public Evaluation evaluate(Path path) {
          final int length = path.length() - 1;
          // only as far as requested
          if (length > ratingDistance) return Evaluation.EXCLUDE_AND_PRUNE;
          Relationship rating = path.lastRelationship();
          // process RATED relationships, not FRIEND
          if (rating != null && rating.getType().equals(RATED)) {
              // my rated movies
              if (length == 0) return Evaluation.EXCLUDE_AND_PRUNE;
              final long movieId = rating.getEndNode().getId();
              int[] stars = ratings.get(movieId);
              if (stars == null) {
                  stars = new int[2];
                  ratings.put(movieId, stars);
              }
              // aggregate for averaging, inverse to distance
              int weight = ratingDistance - length;
              stars[0] += weight * (Integer) rating.getProperty("stars", 0);
              stars[1] += weight;
              return Evaluation.INCLUDE_AND_PRUNE;
          }
          return Evaluation.EXCLUDE_AND_CONTINUE;
      }
    });

    Map<Movie,Integer> result=new HashMap<Movie, Integer>();
    // lazy traversal results
    final Iterable<Movie> movies = movieRepository.findAllByTraversal(user, traversal);
    for (Movie movie : movies) { // assign movie to averaged rating
      final int[] stars = ratings.get(movie.getNodeId());
      result.put(movie, stars[0]/stars[1]);
    }
    return result;
}
]]></programlisting>
        </example>
    </para -->
    <para>
        The controllers simply called these methods, added their results to the model, and the
        view rendered the recommendations alongside the user's own ratings.
    </para>
</chapter>
